<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yev&#39;s security notes</title>
    <link>https://0xphoenix.github.io/</link>
    <description>Recent content on Yev&#39;s security notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Apr 2018 18:52:01 -0400</lastBuildDate>
    
	<atom:link href="https://0xphoenix.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Portable Network Traffic Capture</title>
      <link>https://0xphoenix.github.io/tools/portable-traffic-capture/</link>
      <pubDate>Sun, 01 Apr 2018 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/tools/portable-traffic-capture/</guid>
      <description>Recently, I found myself in need of SSL traffic analysis coming out of IoT and mobile devices. After some considerations about the setup of monitoring gear I ended up with using Raspberry Pi 3 as a platform for that because most of the devices were with wifi only and I needed something more mobile at hand. There are some guides to set such platform up but I found them lacking certain things that prevented the whole thing from working for me.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 1</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_1/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_1/</guid>
      <description>The binary can be downloaded from the original site. Quick check shows that this is a .NET executable with some humor:
Using very handy .NET decompiler, ILSpy, let’s check the source of this funny thing with emphasis on the implementation of Decode event handler:
private void btnDecode_Click(object sender, EventArgs e) { this.pbRoge.Image = Resources.bob_roge; byte[] dat_secret = Resources.dat_secret; string text = &amp;quot;&amp;quot;; for (int i = 0; i &amp;lt; dat_secret.Length; i++) { byte b = dat_secret[i]; text += (char)((b &amp;gt;&amp;gt; 4 | ((int)b &amp;lt;&amp;lt; 4 &amp;amp; 240)) ^ 41); } text += &amp;quot;\0&amp;quot;; string text2 = &amp;quot;&amp;quot;; for (int j = 0; j &amp;lt; text.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 2</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_2/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_2/</guid>
      <description>In this one, flare-on.com site was attacked. The attacker left “something” behind for us to investigate. We are getting the snapshot of the site for analysis and the email is somewhere inside:
After analysis of the original site against the challenge files, the “secret” is found in the image file (flare-on.png) and that is where the “digging” will take place:
Let’s extract that hidden message for further processing - Stage 0:</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 3</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_3/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_3/</guid>
      <description>This challenge is about analyzing a binary file. Using IDA. we see here a sort of “obfuscation” where the actual code (payload) is moved into the stack by the loader and executed from there:
The payload is actually a multi-stage xor based, self decrypting code which in our case has various funny sentences revealed in every decrypted part:
   Stage Result              I hope, you’ve got the idea here.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 4</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_4/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_4/</guid>
      <description>In this task, there is a PDF file only. The first thought that crossed my mind was that there is some kind of exploit embedded in it. Let’s analyze the file to see what secrets it got hidden. There are several ways to do it: online resources (wepwet) or local. I’ll use the later as online will do most of work for you and you will miss all the fun and knowledge.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 5</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_5/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_5/</guid>
      <description>This one starts the series of more challenging puzzles. The binary is actually a key logger with a twist, writing every pressed key into a log file.
Fig. 1
It will try to install itself in your system under %SystemRoot% by disguising as svchost.dll. It will also add itself under Run key to ensure persistence (boring). The interesting things are waiting for us latter on.
As I mentioned previously, this key-logger has a twist – each key press is monitored by GetAsyncKeyState which is running in the loop.</description>
    </item>
    
    <item>
      <title>Flare-On 2014 Chellage 6</title>
      <link>https://0xphoenix.github.io/challenges/flare/flareon_2014_6/</link>
      <pubDate>Tue, 23 Sep 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/challenges/flare/flareon_2014_6/</guid>
      <description>Challenge #6, probably the most toughest task among the series. We are blessed with 64 bit statically linked ELF file with stripped symbols. During the challenge we will be using the following tools:
 radare2 IDA gdb  First things, first Let’s execute the file (in VM of course) and see what will be the output (if any):
[test ~]$ ./c6 no  Not much, but it’s a start. This no will be our anchor and starting point in a minute.</description>
    </item>
    
    <item>
      <title>Necurs Kit Privilege Escalation Study</title>
      <link>https://0xphoenix.github.io/reversing/necurs_study/</link>
      <pubDate>Tue, 22 Jul 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/necurs_study/</guid>
      <description>Recently there were several new posts (FSecure Post and Peter Ferrie) about updates to the Necurs malicious kit which in essence is based on the malicious driver with sole purpose to protect other malware from security products. The updated version is now shipped as an embedded self-contained launch-and-forget shellcode which will drop the appropriate driver according to the underlingg OS and on successful deployment will start immediate protection. The authors of the kit will supply the client several APIs that could be used to operate the driver.</description>
    </item>
    
    <item>
      <title>Malware reuse - cpu emulation for malware analysis</title>
      <link>https://0xphoenix.github.io/reversing/cpu_emulation_for_malware_analysis/</link>
      <pubDate>Fri, 28 Dec 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/cpu_emulation_for_malware_analysis/</guid>
      <description>During any RE project, precise goal definition is one of the most important steps, without which the project will most likely fail. And I’m not even talking about how time consuming it could be, as frequently I can find the rabbit hole but I’m not really aware how deep it goes. The context for the whole post is RE of malicious software and here I’d like to talk a little bit about the way to put some of the work on the shoulders of the malware itself and still be able to concentrate on the main goals.</description>
    </item>
    
    <item>
      <title>Banker Challenge - another solution</title>
      <link>https://0xphoenix.github.io/reversing/banker_challenge_static/</link>
      <pubDate>Sun, 07 Oct 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/banker_challenge_static/</guid>
      <description>In my last post I presented a malware analysis solely based on the dynamic technique using OllyDbg. The goal was to recover the algorithm that was used for domain name generation of the C&amp;amp;C server. Knowing, that there is no one best tool for everything but rather the best tool for a particular problem, I’ve decided to try and solve the same challenge with the help from static analysis tools, like IDA (free edition), while minimizing Olly involvement.</description>
    </item>
    
    <item>
      <title>Banker Challenge</title>
      <link>https://0xphoenix.github.io/reversing/banker_challenge/</link>
      <pubDate>Wed, 01 Aug 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/banker_challenge/</guid>
      <description>There were many thoughts about what should I write about in my first time ever post in my own reversing blog. Fortunately for me, my will to publish my findings and the reversing challenge, that my good friend has kindly pointed me to, resulted in the birth of this first post. So, I’d like to write about the steps I took to accomplish the challenge and what eventually I’ve learned from it at the end.</description>
    </item>
    
  </channel>
</rss>