<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reversing on Yev&#39;s security notes</title>
    <link>https://0xphoenix.github.io/categories/reversing/</link>
    <description>Recent content in Reversing on Yev&#39;s security notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jul 2014 18:52:01 -0400</lastBuildDate>
    
	<atom:link href="https://0xphoenix.github.io/categories/reversing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Necurs Kit Privilege Escalation Study</title>
      <link>https://0xphoenix.github.io/reversing/necurs_study/</link>
      <pubDate>Tue, 22 Jul 2014 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/necurs_study/</guid>
      <description>Recently there were several new posts (FSecure Post and Peter Ferrie) about updates to the Necurs malicious kit which in essence is based on the malicious driver with sole purpose to protect other malware from security products. The updated version is now shipped as an embedded self-contained launch-and-forget shellcode which will drop the appropriate driver according to the underlingg OS and on successful deployment will start immediate protection. The authors of the kit will supply the client several APIs that could be used to operate the driver.</description>
    </item>
    
    <item>
      <title>Malware reuse - cpu emulation for malware analysis</title>
      <link>https://0xphoenix.github.io/reversing/cpu_emulation_for_malware_analysis/</link>
      <pubDate>Fri, 28 Dec 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/cpu_emulation_for_malware_analysis/</guid>
      <description>During any RE project, precise goal definition is one of the most important steps, without which the project will most likely fail. And I’m not even talking about how time consuming it could be, as frequently I can find the rabbit hole but I’m not really aware how deep it goes. The context for the whole post is RE of malicious software and here I’d like to talk a little bit about the way to put some of the work on the shoulders of the malware itself and still be able to concentrate on the main goals.</description>
    </item>
    
    <item>
      <title>Banker Challenge - another solution</title>
      <link>https://0xphoenix.github.io/reversing/banker_challenge_static/</link>
      <pubDate>Sun, 07 Oct 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/banker_challenge_static/</guid>
      <description>In my last post I presented a malware analysis solely based on the dynamic technique using OllyDbg. The goal was to recover the algorithm that was used for domain name generation of the C&amp;amp;C server. Knowing, that there is no one best tool for everything but rather the best tool for a particular problem, I’ve decided to try and solve the same challenge with the help from static analysis tools, like IDA (free edition), while minimizing Olly involvement.</description>
    </item>
    
    <item>
      <title>Banker Challenge</title>
      <link>https://0xphoenix.github.io/reversing/banker_challenge/</link>
      <pubDate>Wed, 01 Aug 2012 18:52:01 -0400</pubDate>
      
      <guid>https://0xphoenix.github.io/reversing/banker_challenge/</guid>
      <description>There were many thoughts about what should I write about in my first time ever post in my own reversing blog. Fortunately for me, my will to publish my findings and the reversing challenge, that my good friend has kindly pointed me to, resulted in the birth of this first post. So, I’d like to write about the steps I took to accomplish the challenge and what eventually I’ve learned from it at the end.</description>
    </item>
    
  </channel>
</rss>